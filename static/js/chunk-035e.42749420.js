(window.webpackJsonp=window.webpackJsonp||[]).push([["chunk-035e"],{"8lwr":function(n,e,t){"use strict";t.r(e);var i=t("jHpe"),r=t.n(i),a=(t("y1X9"),t("QWvX"),t("ZgVT"),t("bPOv"),t("hnpa"),t("PYIv"),t("45FF"),t("c2Kr"),t("9SXm"),t("26Sd"),t("Te+H"),t("+pfR"),{data:function(){return{}},mounted:function(){r.a.highlightAll(),this.bindEvent()},methods:{bindEvent:function(){}}}),d=(t("HC1q"),t("KHd+")),c=Object(d.a)(a,function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticStyle:{padding:"30px"}},[t("div",[t("strong",[n._v("替换key")])]),n._v(" "),t("div",{staticStyle:{width:"800px"}},[t("pre",[t("code",{staticClass:"language-js"},[n._v('\n      将value 替换为id\n      var data = [\n        {name:\'a\', value:\'1\'},\n        {name:\'b\', value:\'2\'}\n      ].map(function(item) {\n          return {\n              name: item.name,\n              id: item.value\n          }\n      });\n      \n      输出：\n      [\n        {"name": "a", "id": "1"}, \n        {"name": "b", "id": "2"} \n      ]\n\n  ')])])]),n._v(" "),t("div",[t("strong",[n._v("比较2个数组的相同和不同")])]),n._v(" "),t("div",{staticStyle:{width:"800px"}},[t("pre",[t("code",{staticClass:"language-js"},[n._v("\n\n    var a = [1,2,3,4]\n    var b = [3,4,5,6]\n\n    let intersection = a.filter(v => b.includes(v))\n    或者\n    let intersection = a.filter(function(v){ \n        return b.indexOf(v) > -1 \n    })\n\n    输出：\n    [3, 4]\n\n    let difference = a.concat(b).filter(\n        v => !a.includes(v) || !b.includes(v)\n    )\n    或者\n    let difference = a.filter(function(v){ \n        return !(b.indexOf(v) > -1) }).concat(b.filter(function(v){ \n            return !(a.indexOf(v) > -1)})\n        )\n    或者\n    let difference = a.concat(b).filter((cur, i, arr) => {\n        return arr.indexOf(cur) === arr.lastIndexOf(cur);\n    });\n\n    输出：\n    [1, 2, 5, 6]\n\n        ")])])]),n._v(" "),t("div",[t("strong",[n._v("拷贝数组")])]),n._v(" "),t("div",{staticStyle:{width:"800px"}},[t("pre",[t("code",{staticClass:"language-js"},[n._v("\n    var arr = [1,2,3]\n\n    方法1:\n    var copyArr = arr.slice()\n\n    方法2：\n    var copyArr = [...arr]\n\n    方法3：\n    var copyArr = arr.concat()\n\n  ")])])]),n._v(" "),t("div",[t("strong",[n._v("数据扁平化")])]),n._v(" "),t("div",{staticStyle:{width:"800px"}},[t("pre",[t("code",{staticClass:"language-js"},[n._v("\n    var arr = [1, [2, [3, 4]]];\n\n    function flatten(arr) {\n        return arr.reduce(function (prev, next) {\n            return prev.concat(Array.isArray(next) ? flatten(next) : next);\n        }, []);\n    }\n\n    flatten(arr);\n    输出：\n    [1,2,3,4]\n\n    方法2：\n    let arr = [1, [2, 3, [4, [5]]]]; arr.flat(3);\n\n    输出：\n    [1,2,3,4,5]\n\n  ")])])]),n._v(" "),t("div",[t("strong",[n._v("树/扁平结构 互相转换")])]),n._v(" "),t("div",{staticStyle:{width:"800px"}},[t("pre",[t("code",{staticClass:"language-js"},[n._v("\n    //树转成扁平结构\n    function treeToList(tree) {\n        var queen = [];\n        var out = [];\n        queen = queen.concat(tree);\n        while (queen.length) {\n            var first = queen.shift();\n            if (first.children) {\n                queen = queen.concat(first.children)\n                delete first['children'];\n            }\n\n            out.push(first);\n        }\n        return out;\n    }\n\n    treeToList({\n        name:'root',\n        children:[\n            {\n                name:'child1'\n            },\n            {\n                name:'child2'\n            }\n        ]\n    })\n\n    输出：\n    [{name: \"root\"},{name: \"child1\"},{name: \"child2\"}]\n\n\n    //扁平结构转成树\n    function listToTree(data, root) {\n        var r = [],\n            o = {};\n        data.forEach(function(a) {\n            if (o[a.id] && o[a.id].children) {\n                a.children = o[a.id] && o[a.id].children;\n            }\n            o[a.id] = a;\n            if (a.pid === root) {\n                r.push(a);\n            } else {\n                o[a.pid] = o[a.pid] || {};\n                o[a.pid].children = o[a.pid].children || [];\n                o[a.pid].children.push(a);\n            }\n        });\n        return r;\n    }\n\n    listToTree( [{name: \"root\",id:'1',pid:'-1'},{name: \"child1\",id:'1-1',pid:'1'},{name: \"child2\",id:'1-2',pid:'1'}],'-1' )\n\n    输出：\n    [{    \n        name:'root',\n        id:'1',\n        pid:'-1',\n        children:[\n            {\n                id:'1-1',\n                pid:'1',\n                name:'child1'\n            },\n            {\n                id:'1-2',\n                pid:'1',\n                name:'child2'\n            }\n        ]\n    }]\n\n\n  ")])])])])}],!1,null,"865271d2",null);c.options.__file="operate.vue";e.default=c.exports},HC1q:function(n,e,t){"use strict";var i=t("sqYu");t.n(i).a},sqYu:function(n,e,t){}}]);